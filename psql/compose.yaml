services:
  # Traefik Reverse Proxy Service
  proxy:
    image: traefik:3
    command: --providers.docker
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: ${TZ:-Asia/Kolkata}
  
  # app service
  app:
    user: ${USER:-devuser}
    build:
      context: .
      target: dev
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.13}
        USER: ${USER:-devuser}
        DEV_UID: ${USERID:-1000} # Use host user ID for better file permissions
        DEV_GID: ${GROUPID:-1000} # Use host group ID
        PGHOST: ${PG_HOST:-db}
        PGPORT: ${PG_PORT:-5432}
        PGDATABASE: ${PG_DATABASE:-ems}
        PGUSER: ${PG_USER:-postgres}
        PGPASSWORD: ${PG_PASSWORD:-secret}
    command: ["tail", "-f", "/dev/null"]
    ports:
      - 3000:3000
    env_file:
      - .env
    # environment:
      # TZ: ${TZ:-Asia/Kolkata}
      # PGHOST: db
      # PGUSER: root
      # PGDATABASE: ems
    volumes:
      - ./.psqlrc:/root/.psqlrc
      - ./.psqlrc:/home/${USER:-devuser}/.psqlrc # local time
      - .:/app:rw # Mount project for live updates
      - dev-venv-ems-psql:/app/.venv:rw # Named volume for the virtual environment
      # - /etc/localtime:/etc/localtime:ro
    working_dir: /app
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .git/
            - .venv/
            - __pycache__/
            - .dockerignore
            - .gitignore
            - Dockerfile
            - compose.yaml
            - README*.md
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./uv.lock
    labels:
      traefik.http.routers.backend.rule: Host(`localhost`)
      traefik.http.services.backend.loadbalancer.server.port: 3000
    depends_on:
      db:
        condition: service_healthy
        
  ## Postgres database Service
  db:
    user: ${PG_USER:-postgres} # switch to default user for db
    image: postgres:17
    restart: always
    # shm_size: 128mb
    # ports:
      # - "5432:5432"
    working_dir: /app
    volumes:
      # - ./.psqlrc:/root/.psqlrc:rw
      # - ./.psqlrc:/var/lib/postgresql/.psqlrc:rw
      - ems-psql-data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./queries.sql:/docker-entrypoint-initdb.d/02-queries.sql
      - ./schema.sql:/app/schema.sql
      - ./queries.sql:/app/queries.sql
      # - /etc/localtime:/etc/localtime:ro
    environment:
      TZ: ${TZ:-Asia/Kolkata}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-secret}
      POSTGRES_DB: ${PG_DATABASE:-ems}
      POSTGRES_USER: ${PG_USER:-postgres}
      PGDATABASE: ${PG_DATABASE:-ems} # this and below env are login specific
      PGUSER: ${PG_USER:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-postgres} -d ${PG_DATABASE:-ems}"]
      interval: 3s
      timeout: 10s
      retries: 50
      start_period: 10s
  
  # adminer Service
  # This service provides a web interface for managing the Postgres database.
  adminer:
    image: adminer
    restart: always
    # ports:
    #   - 8080:8080
    environment:
      TZ: ${TZ:-Asia/Kolkata}
      ADMINER_DEFAULT_SERVER: ${PG_HOST:-db}
      ADMINER_DEFAULT_DRIVER: pgsql
      ADMINER_DEFAULT_USER: ${PG_USER:-postgres}
      ADMINER_DEFAULT_PASSWORD: ${PG_PASSWORD:-secret}
      ADMINER_DEFAULT_DB: ${PG_DATABASE:-ems}
      ADMINER_PLUGINS: "tables-filter tinymce" # Optional: Enable plugins (space-separated)
      # ADMINER_APP_KEY: secret # Optional: For permanent login
      ADMINER_DESIGN: nette # optional
    labels:
      - traefik.http.routers.adminer.rule=Host(`${PG_HOST:-db}.localhost`)
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    depends_on:
      db:
          condition: service_healthy

# Define the named volume for the virtual environment
volumes:
  dev-venv-ems-psql:
  ems-psql-data:
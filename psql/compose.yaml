services:
  # Traefik Reverse Proxy Service
  proxy:
    image: traefik:3
    command: --providers.docker
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  # app service
  app:
    build:
      context: .
      target: dev
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.13}
        DEV_UID: ${USERID:-1000} # Use host user ID for better file permissions
        DEV_GID: ${GROUPID:-1000} # Use host group ID
    command: ["tail", "-f", "/dev/null"]
    ports:
      - 3000:3000
    env_file:
      - .env
    # environment:
      # POSTGRES_HOST: db
      # POSTGRES_USER: root
      # POSTGRES_PASSWORD: secret
      # POSTGRES_DATABASE: ems
    volumes:
      - .:/app:rw # Mount project for live updates
      - dev-venv-ems-psql:/app/.venv # Named volume for the virtual environment
    working_dir: /app
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .git/
            - .venv/
            - __pycache__/
            - .dockerignore
            - .gitignore
            - Dockerfile
            - compose.yaml
            - README*.md
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./uv.lock
    labels:
      traefik.http.routers.backend.rule: Host(`localhost`)
      traefik.http.services.backend.loadbalancer.server.port: 3000
        
  ## Postgres database Service
  db:
    image: postgres:17
    restart: always
    # shm_size: 128mb
    # ports:
      # - "5432:5432"
    working_dir: /app
    volumes:
      - ems-psql-data:/var/lib/postgresql/data
      # - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      # - ./queries.sql:/docker-entrypoint-initdb.d/02-queries.sql
      - ./schema.sql:/app/schema.sql
      - ./queries.sql:/app/queries.sql
    environment: 
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: ems
    # healthcheck:
    #   test: ["CMD-SHELL", "psql -U postgres -d testing"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 50
    #   start_period: 30s
  
  # phpMyAdmin Service
  # This service provides a web interface for managing the Postgres database.
  adminer:
    image: adminer
    restart: always
    # ports:
    #   - 8080:8080
    environment:
      PMA_HOST: db
      PMA_USER: postgres
      PMA_PASSWORD: secret
    labels:
      traefik.http.routers.adminer.rule: Host(`db.localhost`)
      traefik.http.services.adminer.loadbalancer.server.port: 8080

# Define the named volume for the virtual environment
volumes:
  dev-venv-ems-psql:
  ems-psql-data: